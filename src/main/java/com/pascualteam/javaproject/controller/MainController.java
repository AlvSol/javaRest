package com.pascualteam.javaproject.controller;

import com.pascualteam.javaproject.exceptions.EmptyException;
import com.pascualteam.javaproject.exceptions.FormatException;
import com.pascualteam.javaproject.exceptions.LengthException;
import com.pascualteam.javaproject.model.HttpResponse;
import com.pascualteam.javaproject.model.User;
import com.pascualteam.javaproject.repository.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.ArrayList;
import java.util.List;
import java.util.NoSuchElementException;

@RestController 	// This means that this class is a Controller
@RequestMapping(path="/userAPI") // This means URL's start with /demo (after Application path)
@CrossOrigin("*")
public class MainController {
	@Autowired // This means to get the bean called userRepository
			   // Which is auto-generated by Spring, we will use it to handle the data
	private UserRepository userRepository;

	@PostMapping(path="/save")
	public HttpResponse save(@RequestBody User user) {

		try {
			user.validate();
			userRepository.findById(user.getId());

			return new HttpResponse(new ArrayList<User>(), "User already exists", false);
		} catch (EmptyException | FormatException | LengthException e) {
			return new HttpResponse(new ArrayList<User>(), e.getMessage(), false);
		} catch (Exception e) {
			User obj = userRepository.save(user);
			List<User> userList = new ArrayList<>();
			userList.add(obj);

			return new HttpResponse(userList, "User saved succesfully", true);
		}

	}

	@GetMapping(path="/all")
	public HttpResponse getAllUsers() {
		List<User> userList = new ArrayList<>();
		userRepository.findAll().forEach(userList::add);

		return new HttpResponse(userList, "Users found succesfully", true);
	}

	@GetMapping(path="/user/{id}")
	public HttpResponse getById(@PathVariable Integer id) {
		try {
			User obj = userRepository.findById(id).get();
			List<User> userList = new ArrayList<>();
			userList.add(obj);

			return new HttpResponse(userList, "User got succesfully", true);
		} catch (NoSuchElementException e){
			System.out.println(e.toString());
			return new HttpResponse(null, "User not found", false);

		}catch (Exception e){
			return new HttpResponse(null, "User not found", false);
		}

	}
}
